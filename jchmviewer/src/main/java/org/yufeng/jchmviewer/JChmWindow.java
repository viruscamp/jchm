/*
 * JChmWindow.java
 ***************************************************************************************
 * Author: Feng Yu. <yfbio@hotmail.com>
 *org.yufeng.jchmviewer 
 *version: 1.0
 ****************************************************************************************
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
**********************************************************************************************/
package org.yufeng.jchmviewer;


import java.util.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

import org.yufeng.jchmlib.*;

import java.io.*;
import javax.swing.tree.*;
import java.net.*;
import javax.swing.text.html.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.event.*;

import org.yufeng.jchmviewer.*;

/**
 * @author yufeng
 * <p>
 * this is the main window to show the jchm
 */
public class JChmWindow extends javax.swing.JFrame {
    //OpenFile of;
    String encode = "gbk";
    ChmManager cm;
    HhcParser hp;
    DefaultTreeModel model;
    JChmServer jserver;
    JChmReader jreader;
    int port = 152;
    private static int npic = 0;

    /**
     * Creates new form JChmWindow
     */
    public JChmWindow() {
        initComponents();
        encode = System.getProperty("file.encoding");
        jTree1.setVisible(false);
        jTree1.removeAll();
        Dimension d = new Dimension();
        d.setSize(800, 600);
        this.setSize(d);
        this.setTitle("JChmViewer");
        final ImageIcon imageIcon = new ImageIcon("jchmimages/yf32dol.gif");
        Image image = imageIcon.getImage();
        this.setIconImage(image);
        jTabbedPane1.setSize(200, 600);
        jTextPane1.setEditable(false);
        jreader = new JChmReader(port);
        jserver = new JChmServer(jreader);
        java.awt.event.ActionEvent evt = null;
        jMenuItem5ActionPerformed(evt); //activate help file
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" 生成的代码 ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jSplitPane1 = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.X_AXIS));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(getIconImage());
        setName("JChmViewer");
        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.setName("Content");
        jScrollPane1.setName("Content");
        jTree1.setCellRenderer(new HhcTreeCellRenderer());
        jTree1.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
            }

            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                jTree1TreeExpanded(evt);
            }
        });
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(jTree1);

        jTabbedPane1.addTab("Content", jScrollPane1);

        jScrollPane3.setName("Search");
        jTabbedPane1.addTab("Search", jScrollPane3);

        jScrollPane4.setName("Index");
        jTabbedPane1.addTab("Index", jScrollPane4);

        jSplitPane1.setLeftComponent(jTabbedPane1);

        jTextPane1.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                jTextPane1HyperlinkUpdate(evt);
            }
        });

        jScrollPane2.setViewportView(jTextPane1);

        jSplitPane1.setRightComponent(jScrollPane2);

        getContentPane().add(jSplitPane1);

        jMenu1.setText("File");
        jMenu1.setActionCommand("\u83dc\u5355");
        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Extract Page...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });

        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Extract All Pages");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });

        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Close");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });

        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");
        jMenuItem5.setText("Content");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });

        jMenu3.add(jMenuItem5);

        jMenuItem6.setText("About");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });

        jMenu3.add(jMenuItem6);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }

    // </editor-fold>//GEN-END:initComponents
    /*the content item in help menu to show help file
     */
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        String enc = System.getProperty("file.encoding");
        String helpfile = "/jchmhelp/user.guide.htm";
        if (enc.compareTo("GBK") == 0 || enc.compareTo("GB2312") == 0)
            helpfile = "/jchmhelp/user.guide-zh.htm";

        String urladd = "http://127.0.0.1:" + port + helpfile;
        try {
            jTextPane1.setPage(urladd);
        } catch (Exception e) {
            jTextPane1.setText("Sorry, help file can't be found :(.");
        }

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * activate the hyperlink of jtextpane
     */
    private void jTextPane1HyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_jTextPane1HyperlinkUpdate
        if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            // JEditorPane pane = (JEditorPane) evt.getS.getSource();
            if (evt instanceof HTMLFrameHyperlinkEvent) {
                HTMLFrameHyperlinkEvent e = (HTMLFrameHyperlinkEvent) evt;
                HTMLDocument doc = (HTMLDocument) jTextPane1.getDocument();
                doc.processHTMLFrameHyperlinkEvent(e);
            } else {
                try {
                    jTextPane1.setPage(evt.getURL());
                } catch (Throwable t) {
                    t.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jTextPane1HyperlinkUpdate

    /**
     * run extract all files command
     */
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setSize(500, 250);
        // jfc.setFileFilter(new DirFilter());
        Container parent = jMenuItem2.getParent();
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int choice = jfc.showSaveDialog(parent);
        if (choice == JFileChooser.APPROVE_OPTION) {
            if (cm != null) {
                String savedir = jfc.getSelectedFile().toString();//.getSelectedFile().getParent();
                if (savedir != null) {
                    extractInSitu(cm, savedir);
                }
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    /**
     * this is the loop to extract all files
     */
    public void extractInSitu(ChmManager cm, String savep) {
        ArrayList fes = cm.enumerateFiles();
        FileEntry fe;
        String name;
        File f;
        for (int k = 0; k < fes.size(); k++) {
            fe = (FileEntry) (fes.get(k));
            name = fe.entryName;
            if (name.lastIndexOf('/') == name.length() - 1)//dir
            {
                f = new File(savep.concat(name));
                f.mkdirs();
            } else
                extractOne(cm, fe, savep.concat(name));
        }
    }

    /**
     * extract one file
     */
    public void extractOne(ChmManager cm, FileEntry fe, String savef) {
        byte[][] tmp = cm.retrieveObject(fe);//"/mini.GIF");///java/awt/CardLayout.html");///java/awt/AWTEvent.html");///javalogo52x88.gif");////test.html");//"/test.html");//"/内容.html");//content.html");//
        writeFile(tmp, savef);
    }

    /**
     * output  the specified file
     */
    private void writeFile(byte[][] tmp, String savef) {
        FileOutputStream fops;
        //FileOutputStream fops1;
        try {
            fops = new FileOutputStream(savef);//"a/mini.GIF"); //cann't use path like /lay/layout.html
            //fops1=new FileOutputStream("content1.html");
            //DataPutStream dps=new DataPutStream(fops);
            for (int i = 0; i < tmp.length; i++)
                fops.write(tmp[i]);
            //fops1.write(tmp[1]);
            fops.close();
            //fops1.close();
        } catch (IOException e) {

        }
    }

    /**
     * show about window
     */
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        About ab = new About(this, true);
        ab.show();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    /**
     * show contont of a selected file in jtextpane
     */
    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) evt.getPath().getLastPathComponent();
        HhcEntry fnode = (HhcEntry) node.getUserObject();
        if (fnode != null && !hp.isParent(fnode.id)) //not dir
        {
            String tmp = "/frame.htmldd";
            String urladd = "http://127.0.0.1:" + port + fnode.URL;
            if (fnode.URL.toLowerCase().endsWith(".gif") || fnode.URL.toLowerCase().endsWith(".jpg")) {
                try {
                    FileWriter fw = new FileWriter(tmp);
                    fw.write("<HTML> <BODY> <IMG  src=\"" + urladd + "\"></BODY></HTML>");
                    fw.close();
                } catch (IOException e) {

                }
                urladd = "http://127.0.0.1:" + port + tmp + (npic++);//just change the name in case server doesn't respond to the same name
            }

            try {
                jTextPane1.setPage(urladd);
            } catch (Exception e) {
                jTextPane1.setText("Sorry,this file can't be extracted :(.");
            }

        } else if (hp.isParent(fnode.id)) {
        } //is parentdir
        else jTextPane1.setText("Sorry,this file doesn't exist :)"); //doesn't exist


    }//GEN-LAST:event_jTree1ValueChanged

    /**
     * expand the jtree
     */
    private void jTree1TreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_jTree1TreeExpanded
        final DefaultMutableTreeNode node = (DefaultMutableTreeNode) (evt.getPath().getLastPathComponent());
        final HhcEntry fnode = (HhcEntry) node.getUserObject();

        Thread runner = new Thread() {
            public void run() {
                if (fnode != null && expand(node, hp)) {
                    Runnable runnable = new Runnable() {
                        public void run() {
                            model.reload(node);
                        }
                    };
                    SwingUtilities.invokeLater(runnable);
                }
            }
        };
        runner.start();
    }//GEN-LAST:event_jTree1TreeExpanded

    /**
     * this will expand the specified branch
     */
    private boolean expand(DefaultMutableTreeNode parent, HhcParser hhc) {
        DefaultMutableTreeNode flag =
                (DefaultMutableTreeNode) parent.getFirstChild();
        if (flag == null)   // No flag
            return false;
        Object obj = flag.getUserObject();
        if (!(obj instanceof Boolean))
            return false;      // Already expanded
        parent.remove(0);  // Remove Flag
        DefaultMutableTreeNode node;
        HhcEntry[] he = hhc.getChildEntry((HhcEntry) parent.getUserObject());
        for (int i = 0; i < he.length; i++) {
            node = new DefaultMutableTreeNode(he[i]);
            parent.add(node);
        }
        return true;
    }

    /**
     * it will specify the extract file name
     * and then extract one file which is displaying in jtextpane
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setSize(500, 250);
        jfc.setFileFilter(new HtmlFilter());
        Container parent = jMenuItem2.getParent();
        int choice = jfc.showSaveDialog(parent);
        if (choice == JFileChooser.APPROVE_OPTION) {
            String savefile = jfc.getSelectedFile().getPath();
            String tmp = savefile.toLowerCase();
            if (!tmp.endsWith(".htm") && !tmp.endsWith(".html"))
                savefile = savefile + ".html";
            String content;
            if ((content = jTextPane1.getText()) != null) {
                FileWriter fw;
                try {
                    fw = new FileWriter(savefile);
                    fw.write(content);
                } catch (IOException e) {
                }
            }

        }
//if(choice==jfc.)
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * exit the window
     */
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    public void dispose() {
        if (hp != null) hp.dispose();
        if (jserver != null) jserver.stop();
        super.dispose();
        System.exit(0);
    }

    /**
     * open the chm file
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //of=new OpenFile();
        //of.setVisible(true);
        JFileChooser jfc = new JFileChooser();
        jfc.setSize(500, 250);
        jfc.setFileFilter(new ChmFilter());
        Container parent = jMenuItem2.getParent();
        int choice = jfc.showOpenDialog(parent);
        if (choice == JFileChooser.APPROVE_OPTION) {
            String fileName;
            //BufferedReader reader;
            fileName = jfc.getSelectedFile().getAbsolutePath();
            //ChmReader.showOne(fileName,"/content.html");

            cm = new ChmManager(fileName);
            ArrayList fes = (ArrayList) cm.enumerateFiles();
            FileEntry fe = null;
            String content = "sorry, it has no content file";
            for (int i = 0; i < fes.size(); i++) {
                fe = (FileEntry) (fes.get(i));
                if (fe.entryName.toLowerCase().endsWith(".hhc")) break;
            }
            if (fe.entryName.toLowerCase().endsWith(".hhc")) {
                content = cm.retrieveFile(fe);
                hp = new HhcParser(content);
            } else {
                ArrayList files = cm.enumerateFiles();
                hp = new HhcParser(files);
            }
            DefaultMutableTreeNode top = new DefaultMutableTreeNode((HhcEntry) hp.getRootHhcEntry());
            top = hhcAddChildren(top, hp);
            top.remove(0);//this one is flag
            model = new DefaultTreeModel(top);
            jTree1.setModel(model);
            jTree1.setCellRenderer(new HhcTreeCellRenderer());
            jTree1.setVisible(true);
            jScrollPane1.setVisible(true);
            jScrollPane1.repaint();
            if (cm != null) { //start server
                if (jserver != null) jserver.stop();
                jreader = new JChmReader(cm, port);
                jserver = new JChmServer(jreader);
            }
        }
        //of.show();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * display the hhc information in jtree
     */
    private DefaultMutableTreeNode hhcAddChildren(DefaultMutableTreeNode top, HhcParser hp) {
        DefaultMutableTreeNode node;
        int id = ((HhcEntry) top.getUserObject()).id;
        int len = hp.hhcsize;
        // int[] n=new int[len];
        // ArrayList nodes=new ArrayList();
        HhcEntry hc;
        if (top.getChildCount() == 0) //parent has first child flag
        {
            int isp = ((HhcEntry) top.getUserObject()).id;
            if (hp.isParent(id)) {
                node = new DefaultMutableTreeNode(new Boolean(true));
                top.add(node);
            }
        }
        for (int i = 0; i < len; i++) {
            // n[i]=-1;
            hc = hp.getHhcEntry(i);
            if (hc != null && hc.parent == id) {
                node = new DefaultMutableTreeNode(hc);
                node = hhcAddChildren(node, hp);
                // nodes
                top.add(node);
            }
        }

        return top;
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JChmWindow().setVisible(true);
            }
        });
    }

    // 变量声明 - 不进行修改//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTree jTree1;
    // 变量声明结束//GEN-END:variables

}

class ChmFilter extends FileFilter   //自定义文件过滤条件
{
    public boolean accept(File f) //再定义accept方法
    {
        if (f.isDirectory()) return true;  //接受目录
        String ext;
        int i = f.getName().lastIndexOf('.');  //查找文件名中最后一个‘.’字符
        //只接受扩展名为.txt或.bat的文件
        if (i == -1) return false;
        else {
            ext = f.getName().substring(i).toLowerCase();
            if (ext.equals(".chm"))
                return true;
        }
        return false;
    }

    public String getDescription()  //返回文件过滤条件的描述字符串
    {
        return "(*.chm)文件";
    }
}

class HtmlFilter extends FileFilter   //自定义文件过滤条件
{
    public boolean accept(File f) //再定义accept方法
    {
        if (f.isDirectory()) return true;  //接受目录
        String ext;
        int i = f.getName().lastIndexOf('.');  //查找文件名中最后一个‘.’字符
        //只接受扩展名为.txt或.bat的文件
        if (i == -1) return false;
        else {
            ext = f.getName().substring(i).toLowerCase();
            if (ext.equals(".htm") || ext.equals(".html"))
                return true;
        }
        return false;
    }

    public String getDescription()  //返回文件过滤条件的描述字符串
    {
        return "(*.htm & *.html)文件";
    }
}
